[{"/vagrant/black-jack-switch/client/src/index.js":"1","/vagrant/black-jack-switch/client/src/reportWebVitals.js":"2","/vagrant/black-jack-switch/client/src/App.jsx":"3","/vagrant/black-jack-switch/client/src/components/Deposit.jsx":"4","/vagrant/black-jack-switch/client/src/components/Withdraw.jsx":"5","/vagrant/black-jack-switch/client/src/components/Footer.jsx":"6","/vagrant/black-jack-switch/client/src/components/Header.jsx":"7","/vagrant/black-jack-switch/client/src/components/Login.jsx":"8","/vagrant/black-jack-switch/client/src/components/Home.jsx":"9","/vagrant/black-jack-switch/client/src/components/Rules.jsx":"10","/vagrant/black-jack-switch/client/src/helpers/cardLogic.js":"11","/vagrant/black-jack-switch/client/src/hooks/useApplicationData.js":"12","/vagrant/black-jack-switch/client/src/components/Chips.jsx":"13","/vagrant/black-jack-switch/client/src/components/Table.jsx":"14","/vagrant/black-jack-switch/client/src/components/Registration.jsx":"15","/vagrant/black-jack-switch/client/src/components/Popup.jsx":"16","/vagrant/black-jack-switch/client/src/components/Actions.jsx":"17","/vagrant/black-jack-switch/client/src/components/Hand.jsx":"18","/vagrant/black-jack-switch/client/src/components/Card.jsx":"19"},{"size":500,"mtime":1610654292000,"results":"20","hashOfConfig":"21"},{"size":362,"mtime":1610654292000,"results":"22","hashOfConfig":"21"},{"size":959,"mtime":1611340754000,"results":"23","hashOfConfig":"21"},{"size":773,"mtime":1611334901000,"results":"24","hashOfConfig":"21"},{"size":600,"mtime":1611329842000,"results":"25","hashOfConfig":"21"},{"size":103,"mtime":1611274100000,"results":"26","hashOfConfig":"21"},{"size":1856,"mtime":1611340754000,"results":"27","hashOfConfig":"21"},{"size":1611,"mtime":1611338755000,"results":"28","hashOfConfig":"21"},{"size":4254,"mtime":1611350399000,"results":"29","hashOfConfig":"21"},{"size":1114,"mtime":1611340754000,"results":"30","hashOfConfig":"21"},{"size":1604,"mtime":1611192111000,"results":"31","hashOfConfig":"21"},{"size":5255,"mtime":1611339360000,"results":"32","hashOfConfig":"21"},{"size":926,"mtime":1611277499000,"results":"33","hashOfConfig":"21"},{"size":3728,"mtime":1611352405000,"results":"34","hashOfConfig":"21"},{"size":5006,"mtime":1611329842000,"results":"35","hashOfConfig":"21"},{"size":606,"mtime":1611338755000,"results":"36","hashOfConfig":"21"},{"size":1580,"mtime":1611338390000,"results":"37","hashOfConfig":"21"},{"size":778,"mtime":1611338390000,"results":"38","hashOfConfig":"21"},{"size":155,"mtime":1611172892000,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1b944gn",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},"/vagrant/black-jack-switch/client/src/index.js",[],["88","89"],"/vagrant/black-jack-switch/client/src/reportWebVitals.js",[],"/vagrant/black-jack-switch/client/src/App.jsx",["90"],"import './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Home from './components/Home';\nimport Login from './components/Login';\nimport Header from './components/Header';\nimport Footer from './components/Footer'\nimport Withdraw from './components/Withdraw';\nimport Deposit from './components/Deposit'\nimport Rules from './components/Rules'\n\nfunction App() {\n  return (\n    <Router> \n    <div className=\"App\">\n      <Header />\n      <Switch>\n        <Route path =\"/login\">\n          <Login />\n        </Route>\n        <Route path =\"/deposit\">\n          <Deposit />\n        </Route>\n        <Route path =\"/withdraw\">\n          <Withdraw />\n        </Route>\n        <Route path =\"/rules\">\n          <Rules />\n        </Route>\n        <Route path =\"/\">\n          <Home />\n        </Route>\n      </Switch>\n      <div id=\"portal\"></div>\n      <Footer />\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","/vagrant/black-jack-switch/client/src/components/Deposit.jsx",["91","92"],"import React, { useState } from 'react'\nimport { Button, Form } from \"react-bootstrap\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./Popup.css\"\n\nexport default function Deposit(onClose) {\n\n  const [amount, setAmount] = useState(\"\")\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(amount)\n}\n\n  return (\n    <div>\n   \n      <Form onSubmit={handleSubmit, onClose}>\n          <Form.Group controlId=\"formBasicEmail\">\n          <Form.Label>Deposet</Form.Label>\n              <Form.Control \n                  value= { amount } \n                  onChange={ (e) => { setAmount(e.target.value) }} \n                  type=\"deposit funds\" \n                  placeholder=\"Enter Amount\" />\n\n              </Form.Group>\n      </Form>\n    </div>\n  )\n}\n","/vagrant/black-jack-switch/client/src/components/Withdraw.jsx",["93","94","95"],"import React, { useState } from 'react'\nimport { Button, Form } from \"react-bootstrap\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./Popup.css\"\n\nexport default function Withdraw(onClose) {\n\n  const [value, setValuet] = useState(\"\")\n\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(value)\n}\n\n  return (\n\n    <div>\n        <Form onSubmit={handleSubmit, onClose}>\n            <Form.Group controlId=\"formBasicRange\">\n              <Form.Label>withdraw</Form.Label>\n              <Form.Control type=\"range\" />\n            </Form.Group>\n        </Form>\n    </div>\n  )\n}\n","/vagrant/black-jack-switch/client/src/components/Footer.jsx",[],"/vagrant/black-jack-switch/client/src/components/Header.jsx",["96","97","98"],"import React, { useState } from \"react\"\nimport {Link} from 'react-router-dom'\nimport Popup from \"./Popup\"\nimport Home from \"./Home\"\nimport Login from \"./Login\"\nimport Deposit from \"./Deposit\"\nimport Withdraw from \"./Withdraw\"\nimport Registration from \"./Registration\"\nimport Rules from './Rules';\nimport axios from \"axios\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./Header.css\";\nimport \"./Popup.css\"\n\n\n\nexport default function Header(props){\n\n  const [selectedMenu, setSelectedMenu] = useState(null)\n  \n  return (\n  <div class=\"dropdown\">\n    <button class=\"dropbtn\">Menu</button>\n  <div id=\"myDropdown\" class=\"dropdown-content\">\n    \n  <button onClick={() => setSelectedMenu(\"register\")}>Resgister</button>\n      <Popup open = { selectedMenu === \"register\" } onClose = { () => setSelectedMenu(null)}>\n          <Registration onClose = { () => setSelectedMenu(null)}></Registration>\n      </Popup>\n    <button onClick={() => setSelectedMenu(\"deposit\")}>Deposit</button>\n      <Popup open = { selectedMenu === \"deposit\" } onClose = { () => setSelectedMenu(null)}>\n          <Deposit></Deposit>\n      </Popup>\n    <button onClick={() => setSelectedMenu(\"withdraw\")}>Withdraw</button>\n      <Popup open = { selectedMenu === \"withdraw\" } onClose = { () => setSelectedMenu(null)}>\n          <Withdraw></Withdraw>\n      </Popup>\n    <button onClick={() => setSelectedMenu(\"login\")}>Login</button>\n      <Popup open = { selectedMenu === \"login\"} onClose = { () => setSelectedMenu(null)}>\n          <Login></Login>\n      </Popup>\n      <button onClick={() => setSelectedMenu(\"rules\")}>Rules</button>\n      <Popup open = { selectedMenu === \"rules\" } onClose = { () => setSelectedMenu(null)}>\n          <Rules onClose = { () => setSelectedMenu(null)}></Rules>\n      </Popup>\n      <button class=\"logout\">Logout </button>  \n      </div>\n    </div>\n  )\n}","/vagrant/black-jack-switch/client/src/components/Login.jsx",[],"/vagrant/black-jack-switch/client/src/components/Home.jsx",["99","100","101","102"],"import { Deck, Hand } from \"../helpers/cardLogic\";\nimport useApplicationData from \"../hooks/useApplicationData\"\n\nimport Table from \"./Table\";\nimport Chips from \"./Chips\";\nimport Actions from './Actions';\n\nimport \"./Home.css\";\n\n\nlet deck = new Deck(6);\nlet dealer = new Hand();\n\n\nlet totalWins = 0;\nlet totalLosses = 0;\nlet totalDraws = 0;\nlet totalBlackjacks = 0;\n\n\nexport default function Home(props) {\n  const {\n    state,\n    updateHand,\n    updateHands,\n    resetHands,\n    addSplitHand,\n    updateActions\n  } = useApplicationData();\n\n  let hand = state.hand;\n  let currentHand = state.currentHand;\n  let actions = state.actions;\n\n\n  const recordStats = (turnWins, turnLosses, turnDraws, turnBlackjacks) => {\n    //  console.log(`Record Stats before: wins ${totalWins} losses ${totalLosses} draws ${totalDraws} `)\n    if (state.turn === \"reveal\") {\n      totalWins += (turnWins / 2);\n      totalLosses += (turnLosses / 2);\n      totalDraws += (turnDraws / 2);\n      totalBlackjacks += (turnBlackjacks / 2);\n      console.log(`Record Stats after: wins ${totalWins} losses ${totalLosses} draws ${totalDraws} `)\n    }\n  }\n  //if (state.dealer) dealer = state.dealer;\n  if (hand[currentHand]) actions.split = hand[currentHand].canSplit;\n\n  const deal = () => {\n    actions.deal = false;\n    updateActions(-1, \"deal\")\n\n    setTimeout(() => { hit(hand[0]) }, 350);\n    setTimeout(() => { hit(hand[0]) }, 1400);\n\n    setTimeout(() => { hit(hand[1]) }, 700);\n    setTimeout(() => { hit(hand[1]) }, 1750);\n\n    setTimeout(() => { hit(dealer) }, 1050);\n    setTimeout(() => { updateActions(0, \"player\") }, 1755);\n  }\n\n  //testcode\n  const fakehit = (hand) => {\n    hand.add(\"AS\")\n    updateHand(hand);\n  }\n  const fakehit2 = (hand) => {\n    hand.add(\"KH\")\n    updateHand(hand);\n  }\n\n  const hit = (hand) => {\n    hand.add(deck.draw())\n    updateHand(hand);\n    actions.switch = false;\n  }\n\n  const checkBlackjack = () => {\n    if (hand[currentHand]) {\n      if (hand[currentHand].value >= 21 && state.turn === \"player\") {\n        stay()\n      }\n    }\n  }\n\n  const stay = () => {\n    if (currentHand < hand.length - 1) {\n      updateHand(hand[currentHand]);\n      currentHand++\n      updateActions(currentHand, \"player\");\n    } else if (currentHand === hand.length - 1) {\n      updateActions(currentHand, \"dealer\");\n    }\n  }\n\n  //DEALER\n  //dealer code\n  if (state.turn === \"dealer\") {\n    if (dealer.value < 17 || (dealer.ace > 0 && dealer.value === 17)) {\n      hit(dealer)\n    } else {\n      updateActions(-1, \"reveal\");\n    }\n  }\n\n  const split = () => {\n    if (hand[currentHand].canSplit === true) {\n      hand[currentHand].canSplit = false;\n      let newHand = new Hand(hand[currentHand].splitHand())\n      addSplitHand(newHand);\n      updateHand(hand[currentHand]);\n      updateHand(hand[currentHand + 1]);\n      setTimeout(() => { hit(hand[currentHand]) }, 500);\n      setTimeout(() => { hit(hand[currentHand + 1]) }, 1000);\n      //**Might have to add updateActions here! */\n    }\n  }\n\n  const doubleDown = () => {\n    //add code to double current hand's bet here\n    hit(hand[currentHand]);\n    stay()\n  }\n\n  //switch is not allowed as a function name in js, use swap instead\n  const swap = (hand1, hand2) => {\n    if (actions.switch) {\n      // actions.switch = false;\n      let temp = hand1.cards[1];\n      hand1.cards[1] = hand2.cards[1];\n      hand2.cards[1] = temp;\n      updateHand(hand1);\n      updateHand(hand2);\n    }\n  }\n\n  checkBlackjack();\n\n  const clearTable = () => {\n    resetHands()\n    dealer = new Hand();\n    updateActions(-1, \"bet\");\n  }\n\n\n\n  return (\n    <div class=\"table\">\n      <Table\n        cardLibrary={state.cards}\n        deck={deck}\n        hand={hand}\n        dealer={dealer}\n        currentHand={currentHand}\n        recordStats={recordStats}\n        totalWins={totalWins}\n        totalLosses={totalLosses}\n        totalDraws={totalDraws}\n        totalBlackjacks={totalBlackjacks}\n      />\n      <Actions\n        hit={() => hit(hand[currentHand])}\n        stay={() => stay()}\n        deal={() => deal()}\n        swap={() => swap(hand[0], hand[1])}\n        split={() => split()}\n        double={() => doubleDown()}\n        reset={() => clearTable()}\n        actions={actions}\n      />\n      <Chips />\n\n    </div>\n  )\n}","/vagrant/black-jack-switch/client/src/components/Rules.jsx",["103","104","105","106"],"import { Button, Form, Col, Alert, Row } from \"react-bootstrap\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./Popup.css\"\n\n\nexport default function Rules(onClose) {\n    return (\n        <div>\n            <h1> Blackjack switch rules</h1>\n            <ul>\n                <li>All rules are based on conventional blackjack unless otherwise noted.</li>\n                <li>Each player is dealt two face-up hands from 6 shuffled decks.</li>\n                <li>The player must have equal bets for both hands.</li>\n                <li>The second card of each hand can be switched prior to any other moves being made.</li>\n                <li>Blackjack pays even money</li>\n                <li>Dealer must hit on soft 17.</li>\n                <li>If dealer has 22 it's a push, unless player has blackjack.</li>\n                <li>The European no-hole-card rule is used. Meaning the dealer is only dealt one card originally and doesn't check for Blackjack if he has a 10 or ace.</li>\n            </ul>\n                <Button variant=\"outline-danger\" onClick={onClose} >close</Button>\n        </div>\n    )\n}\n\n\n\n","/vagrant/black-jack-switch/client/src/helpers/cardLogic.js",[],"/vagrant/black-jack-switch/client/src/hooks/useApplicationData.js",["107","108","109"],"import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nimport { Deck, Hand } from \"../helpers/cardLogic\";\n\nexport default function useApplicationData() {\n\n  const [state, setState] = useState({\n    users: [],\n    cards: [],\n    hand: [],\n    dealer: {},\n    currentHand: -1,\n    turn: null,\n    actions: {\n      deal: false,\n      hit: false,\n      stay: false,\n      split: false,\n      switch: false,\n      double: false,\n      reset: true,\n    }\n  })\n\n  useEffect(() => {\n    Promise.all([ //unsure what the * does, might be security risk\n      axios.get('http://localhost:3001/api/users',\n        { headers: { 'Access-Control-Allow-Origin': '*' } }),\n      axios.get('http://localhost:3001/api/cards',\n        { headers: { 'Access-Control-Allow-Origin': '*' } })\n    ]).then((all) => {\n      let hand = []\n      hand[0] = new Hand();\n      hand[1] = new Hand();\n      let dealer = new Hand();\n      let updateActions = state.actions\n      updateActions.deal = true;\n      setState(prev => ({\n        ...prev,\n        users: all[0].data,\n        cards: all[1].data,\n        hand: hand,\n        dealer: dealer,\n        actions: updateActions,\n        turn: \"bet\"\n      }))\n    });\n  }, []);\n\n  const updateHand = (hand) => {\n    //first calculates the values hand\n    let value = 0;\n    let aces = hand.ace;\n    //let currentHand = state.currentHand;\n\n    for (const card of hand.cards) {\n      let cardInfo = state.cards.find(info => info.name === card);\n\n      value += cardInfo.value;\n      if (cardInfo.ace === true) aces++;\n    }\n    for (let i = aces; i > 0; i--) {\n      if (value > 21) {\n        value -= 10;\n      }\n    }\n\n    //checks if splitting should be possible\n    if (state.turn !== \"dealer\") {\n      if (hand.cards.length === 2) {\n        let card1value = state.cards.find(x => x.name === hand.cards[0]).value;\n        let card2value = state.cards.find(x => x.name === hand.cards[1]).value;\n        if (card1value === card2value) {\n          hand.canSplit = true;\n        }\n      } else {\n        hand.canSplit = false;\n      }      \n    }\n\n    hand.value = value;\n\n    setState(prev => ({ ...prev, [hand]: hand }));\n  }\n\n  const updateHands = (hands) => {\n    let activeHand = state.currentHand;\n    for (const hand of hands) {\n      //first calculates the values hand\n      let value = 0;\n      let aces = hand.ace;\n      let currentHand = state.currentHand;\n\n      for (const card of hand.cards) {\n        let cardInfo = state.cards.find(info => info.name === card);\n\n        value += cardInfo.value;\n        if (cardInfo.ace === true) aces++;\n      }\n      for (let i = aces; i > 0; i--) {\n        if (value > 21) {\n          value -= 10;\n        }\n        //checks if splitting should be possible\n        if (hand.cards.length === 2) {\n          let card1value = state.cards.find(x => x.name === hand.cards[0]).value;\n          let card2value = state.cards.find(x => x.name === hand.cards[1]).value;\n          if (card1value === card2value) {\n            hand.canSplit = true;\n          }\n        } else {\n          hand.canSplit = false;\n        }\n        hand.value = value;\n        //checks if hand is >= 21, if so, on to the next hand\n        if (state.turn === \"player\") {\n          if (hand.value >= 21 && currentHand < state.hand.length - 1) {\n            currentHand = currentHand + 1;\n          } else if (hand.value >= 21 && currentHand === state.hand.length - 1) {\n            updateActions(0, \"dealer\");\n          }\n        }\n      }\n    }\n    setState(prev => ({ ...prev, hand: hands, currentHand: activeHand }))\n  }\n\n  const addSplitHand = (newHand) => {\n    let updateHands = state.hand;\n    let currentHand = state.currentHand\n    if (currentHand < updateHands.length) {\n      updateHands.splice((currentHand + 1), 0, newHand)\n    } else {\n      updateHands.push(currentHand);\n    }\n\n    setState(prev => ({ ...prev, hand: updateHands }))\n  }\n\n  const updateActions = (currentHand, phase) => {\n    let updateActions = state.actions\n    switch (phase) {\n      case \"reveal\":\n        updateActions.reset = true;\n        break;\n      case \"bet\":\n        updateActions.deal = true;\n        break;\n      case \"deal\":\n        updateActions.deal = false;\n        updateActions.reset = false;\n        break;\n      case \"player\":\n        let swapStatus = (currentHand === 0 && state.hand[1].cards.length === 2 && state.hand.length === 2)\n        updateActions = {\n          deal: false,\n          hit: true,\n          stay: true,\n          split: state.hand[currentHand].canSplit,\n          switch: swapStatus,\n          double: true\n        }\n        break;\n      case \"dealer\":\n        updateActions = {\n          deal: false,\n          hit: false,\n          stay: false,\n          split: false,\n          switch: false,\n          double: false\n        }\n        break;\n    }\n    setState(prev => ({ ...prev, currentHand: currentHand, actions: updateActions, turn: phase }))\n  }\n\n  const resetHands = () => {\n      let hand = []\n      hand[0] = new Hand();\n      hand[1] = new Hand();\n      let dealer = new Hand();\n      setState(prev => ({\n        ...prev, hand: hand, currentHand: 0, dealer: dealer\n      }))\n  }\n\n  return { state, updateHand, updateHands, addSplitHand, updateActions, resetHands }\n}","/vagrant/black-jack-switch/client/src/components/Chips.jsx",[],"/vagrant/black-jack-switch/client/src/components/Table.jsx",[],"/vagrant/black-jack-switch/client/src/components/Registration.jsx",[],"/vagrant/black-jack-switch/client/src/components/Popup.jsx",["110","111"],"import React from \"react\"\nimport ReactDom from \"react-dom\"\nimport { Card, Button, Form } from \"react-bootstrap\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./Popup.css\"\n\nexport default function Popup({ open, children }){\n  if (!open) return null\n  return ReactDom.createPortal(\n    <>\n    <div className=\"modal-container\">\n      <Card style={{width:\"25rem\"}}>\n        <Card.Img className=\"img\" variant=\"top\" src=\"https://gaming.unlv.edu/gallery/BJ.jpg\" />\n        <Card.Body>\n          {children}\n        </Card.Body>\n\n      </Card>\n  `</div>\n    </>,\n    document.getElementById('portal')\n  )\n}","/vagrant/black-jack-switch/client/src/components/Actions.jsx",[],"/vagrant/black-jack-switch/client/src/components/Hand.jsx",[],"/vagrant/black-jack-switch/client/src/components/Card.jsx",[],["112","113"],{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":6,"column":3,"nodeType":"120","messageId":"121","endLine":6,"endColumn":7},{"ruleId":"118","severity":1,"message":"122","line":2,"column":10,"nodeType":"120","messageId":"121","endLine":2,"endColumn":16},{"ruleId":"123","severity":1,"message":"124","line":18,"column":35,"nodeType":"125","messageId":"126","endLine":18,"endColumn":36},{"ruleId":"118","severity":1,"message":"122","line":2,"column":10,"nodeType":"120","messageId":"121","endLine":2,"endColumn":16},{"ruleId":"118","severity":1,"message":"127","line":8,"column":17,"nodeType":"120","messageId":"121","endLine":8,"endColumn":26},{"ruleId":"123","severity":1,"message":"124","line":19,"column":37,"nodeType":"125","messageId":"126","endLine":19,"endColumn":38},{"ruleId":"118","severity":1,"message":"119","line":2,"column":9,"nodeType":"120","messageId":"121","endLine":2,"endColumn":13},{"ruleId":"118","severity":1,"message":"128","line":4,"column":8,"nodeType":"120","messageId":"121","endLine":4,"endColumn":12},{"ruleId":"118","severity":1,"message":"129","line":10,"column":8,"nodeType":"120","messageId":"121","endLine":10,"endColumn":13},{"ruleId":"118","severity":1,"message":"130","line":25,"column":5,"nodeType":"120","messageId":"121","endLine":25,"endColumn":16},{"ruleId":"118","severity":1,"message":"131","line":42,"column":7,"nodeType":"120","messageId":"121","endLine":42,"endColumn":22},{"ruleId":"118","severity":1,"message":"132","line":64,"column":9,"nodeType":"120","messageId":"121","endLine":64,"endColumn":16},{"ruleId":"118","severity":1,"message":"133","line":68,"column":9,"nodeType":"120","messageId":"121","endLine":68,"endColumn":17},{"ruleId":"118","severity":1,"message":"134","line":1,"column":18,"nodeType":"120","messageId":"121","endLine":1,"endColumn":22},{"ruleId":"118","severity":1,"message":"135","line":1,"column":24,"nodeType":"120","messageId":"121","endLine":1,"endColumn":27},{"ruleId":"118","severity":1,"message":"136","line":1,"column":29,"nodeType":"120","messageId":"121","endLine":1,"endColumn":34},{"ruleId":"118","severity":1,"message":"137","line":1,"column":36,"nodeType":"120","messageId":"121","endLine":1,"endColumn":39},{"ruleId":"118","severity":1,"message":"138","line":4,"column":10,"nodeType":"120","messageId":"121","endLine":4,"endColumn":14},{"ruleId":"139","severity":1,"message":"140","line":49,"column":6,"nodeType":"141","endLine":49,"endColumn":8,"suggestions":"142"},{"ruleId":"143","severity":1,"message":"144","line":143,"column":5,"nodeType":"145","messageId":"146","endLine":175,"endColumn":6},{"ruleId":"118","severity":1,"message":"122","line":3,"column":16,"nodeType":"120","messageId":"121","endLine":3,"endColumn":22},{"ruleId":"118","severity":1,"message":"134","line":3,"column":24,"nodeType":"120","messageId":"121","endLine":3,"endColumn":28},{"ruleId":"114","replacedBy":"147"},{"ruleId":"116","replacedBy":"148"},"no-native-reassign",["149"],"no-negated-in-lhs",["150"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'setValuet' is assigned a value but never used.","'Home' is defined but never used.","'axios' is defined but never used.","'updateHands' is assigned a value but never used.","'totalBlackjacks' is assigned a value but never used.","'fakehit' is assigned a value but never used.","'fakehit2' is assigned a value but never used.","'Form' is defined but never used.","'Col' is defined but never used.","'Alert' is defined but never used.","'Row' is defined but never used.","'Deck' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'state.actions'. Either include it or remove the dependency array.","ArrayExpression",["151"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["149"],["150"],"no-global-assign","no-unsafe-negation",{"desc":"152","fix":"153"},"Update the dependencies array to be: [state.actions]",{"range":"154","text":"155"},[1206,1208],"[state.actions]"]