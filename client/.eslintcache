[{"/home/nathan/lighthouse/blackjack-switch/client/src/index.js":"1","/home/nathan/lighthouse/blackjack-switch/client/src/reportWebVitals.js":"2","/home/nathan/lighthouse/blackjack-switch/client/src/App.jsx":"3","/home/nathan/lighthouse/blackjack-switch/client/src/components/Home.jsx":"4","/home/nathan/lighthouse/blackjack-switch/client/src/components/Login.jsx":"5","/home/nathan/lighthouse/blackjack-switch/client/src/components/Withdraw.jsx":"6","/home/nathan/lighthouse/blackjack-switch/client/src/components/Header.jsx":"7","/home/nathan/lighthouse/blackjack-switch/client/src/components/Footer.jsx":"8","/home/nathan/lighthouse/blackjack-switch/client/src/components/Deposit.jsx":"9","/home/nathan/lighthouse/blackjack-switch/client/src/hooks/useApplicationData.js":"10","/home/nathan/lighthouse/blackjack-switch/client/src/helpers/cardLogic.js":"11","/home/nathan/lighthouse/blackjack-switch/client/src/components/Actions.jsx":"12","/home/nathan/lighthouse/blackjack-switch/client/src/components/Table.jsx":"13","/home/nathan/lighthouse/blackjack-switch/client/src/components/Chips.jsx":"14","/home/nathan/lighthouse/blackjack-switch/client/src/components/Popup.jsx":"15","/home/nathan/lighthouse/blackjack-switch/client/src/components/Registration.jsx":"16","/home/nathan/lighthouse/blackjack-switch/client/src/components/Hand.jsx":"17","/home/nathan/lighthouse/blackjack-switch/client/src/components/Card.jsx":"18"},{"size":500,"mtime":1610654286500,"results":"19","hashOfConfig":"20"},{"size":362,"mtime":1610654286500,"results":"21","hashOfConfig":"20"},{"size":852,"mtime":1611351723236,"results":"22","hashOfConfig":"20"},{"size":3307,"mtime":1611351723236,"results":"23","hashOfConfig":"20"},{"size":1117,"mtime":1611351723236,"results":"24","hashOfConfig":"20"},{"size":600,"mtime":1611322806837,"results":"25","hashOfConfig":"20"},{"size":1579,"mtime":1611351723236,"results":"26","hashOfConfig":"20"},{"size":103,"mtime":1610818973415,"results":"27","hashOfConfig":"20"},{"size":773,"mtime":1611322806837,"results":"28","hashOfConfig":"20"},{"size":5234,"mtime":1611351723236,"results":"29","hashOfConfig":"20"},{"size":1604,"mtime":1611164790130,"results":"30","hashOfConfig":"20"},{"size":1365,"mtime":1611351723236,"results":"31","hashOfConfig":"20"},{"size":2815,"mtime":1611322806837,"results":"32","hashOfConfig":"20"},{"size":926,"mtime":1611285294591,"results":"33","hashOfConfig":"20"},{"size":623,"mtime":1611351723236,"results":"34","hashOfConfig":"20"},{"size":5006,"mtime":1611351723236,"results":"35","hashOfConfig":"20"},{"size":761,"mtime":1611351723236,"results":"36","hashOfConfig":"20"},{"size":155,"mtime":1611164790078,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1yhmugl",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"/home/nathan/lighthouse/blackjack-switch/client/src/index.js",[],["82","83"],"/home/nathan/lighthouse/blackjack-switch/client/src/reportWebVitals.js",[],"/home/nathan/lighthouse/blackjack-switch/client/src/App.jsx",["84"],"/home/nathan/lighthouse/blackjack-switch/client/src/components/Home.jsx",["85","86","87"],"import { Deck, Hand } from \"../helpers/cardLogic\";\nimport useApplicationData from \"../hooks/useApplicationData\"\n\nimport Table from \"./Table\";\nimport Chips from \"./Chips\";\nimport Actions from './Actions';\n\nimport \"./Home.css\";\n\n\nlet deck = new Deck(1);\nlet dealer = new Hand();\n\nexport default function Home(props) {\n  const {\n    state,\n    updateHand,\n    updateHands,\n    resetHands,\n    addSplitHand,\n    updateActions\n  } = useApplicationData();\n\n  let hand = state.hand;\n  let currentHand = state.currentHand;\n  let actions = state.actions;\n  \n  //if (state.dealer) dealer = state.dealer;\n  if (hand[currentHand]) actions.split = hand[currentHand].canSplit;\n\n  const deal = () => {\n    actions.deal = false;\n    updateActions(-1, \"deal\")\n\n    setTimeout(() => { hit(hand[0]) }, 350);\n    setTimeout(() => { hit(hand[0]) }, 1400);\n\n    setTimeout(() => { hit(hand[1]) }, 700);\n    setTimeout(() => { hit(hand[1]) }, 1750);\n\n    setTimeout(() => { hit(dealer) }, 1050);\n    setTimeout(() => { updateActions(0, \"player\") }, 1755);\n  }\n\n  //testcode\n  const fakehit = (hand) => {\n    hand.add(\"AS\")\n    updateHand(hand);\n  }\n  const fakehit2 = (hand) => {\n    hand.add(\"KH\")\n    updateHand(hand);\n  }\n\n  const hit = (hand) => {\n    hand.add(deck.draw())\n    updateHand(hand);\n    actions.switch = false;\n  }\n\n  const checkBlackjack = () => {    \n    if (hand[currentHand]) {\n      if (hand[currentHand].value >= 21 && state.turn === \"player\") {\n        stay()\n      }\n    }\n  }\n\n  const stay = () => {\n    if (currentHand < hand.length - 1) {\n      updateHand(hand[currentHand]);\n      currentHand++\n      updateActions(currentHand, \"player\");\n    } else if (currentHand === hand.length - 1) {\n      updateActions(currentHand, \"dealer\");\n    }\n  }\n\n  //DEALER\n  //dealer code\n  if (state.turn === \"dealer\") {\n    if (dealer.value < 17 || (dealer.ace > 0 && dealer.value === 17)) {\n      hit(dealer)\n    } else {\n      updateActions(-1, \"reveal\");\n    }\n  }\n\n  const split = () => {\n    if (hand[currentHand].canSplit === true) {\n      hand[currentHand].canSplit = false;\n      let newHand = new Hand(hand[currentHand].splitHand())\n      addSplitHand(newHand);\n      updateHand(hand[currentHand]);\n      updateHand(hand[currentHand + 1]);\n      setTimeout(() => { hit(hand[currentHand]) }, 500);\n      setTimeout(() => { hit(hand[currentHand + 1]) }, 1000);\n      //**Might have to add updateActions here! */\n    }\n  }\n\n  const doubleDown = () => {\n    //add code to double current hand's bet here\n    hit(hand[currentHand]);\n    stay()\n  }\n\n  //switch is not allowed as a function name in js, use swap instead\n  const swap = (hand1, hand2) => {\n    if (actions.switch) {\n      // actions.switch = false;\n      let temp = hand1.cards[1];\n      hand1.cards[1] = hand2.cards[1];\n      hand2.cards[1] = temp;\n      updateHand(hand1);\n      updateHand(hand2);\n    }\n  }\n\n  checkBlackjack();\n\n  const clearTable = () => {\n      resetHands()\n      dealer = new Hand();\n      updateActions(-1, \"bet\");\n  }\n\n  return (\n    <div class=\"table\">\n      <Table\n        cardLibrary={state.cards}\n        deck={deck}\n        hand={hand}\n        dealer={dealer}\n        currentHand={currentHand}\n      />\n      <Actions\n        hit={() => hit(hand[currentHand])}\n        stay={() => stay()}\n        deal={() => deal()}\n        swap={() => swap(hand[0], hand[1])}\n        split={() => split()}\n        double={() => doubleDown()}\n        reset={() => clearTable()}\n        actions={actions}\n      />\n      <Chips />\n\n    </div>\n  )\n}","/home/nathan/lighthouse/blackjack-switch/client/src/components/Login.jsx",["88"],"import React from 'react'\nimport { Button, Form } from \"react-bootstrap\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./Popup.css\"\n\nexport default function Login() {\n    return (\n        <div>\n            <Form>\n                <Form.Group controlId=\"formBasicEmail\">\n                <Form.Label>Email address</Form.Label>\n                <Form.Control type=\"email\" placeholder=\"Enter email\" />\n                <Form.Text className=\"text-muted\">\n                    We'll never share your email with anyone else.\n                </Form.Text>\n                </Form.Group>\n\n                <Form.Group controlId=\"formBasicPassword\">\n                <Form.Label>Password</Form.Label>\n                <Form.Control type=\"password\" placeholder=\"Password\" />\n                </Form.Group>\n                <Form.Group controlId=\"formBasicCheckbox\">\n                <Form.Check type=\"checkbox\" label=\"Check me out\" />\n                </Form.Group>\n            \n            </Form>\n                <Button variant=\"primary\" type=\"submit\">\n                    Submit\n                </Button>\n        </div>\n    )\n}\n","/home/nathan/lighthouse/blackjack-switch/client/src/components/Withdraw.jsx",["89","90","91"],"import React, { useState } from 'react'\nimport { Button, Form } from \"react-bootstrap\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./Popup.css\"\n\nexport default function Withdraw(onClose) {\n\n  const [value, setValuet] = useState(\"\")\n\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(value)\n}\n\n  return (\n\n    <div>\n        <Form onSubmit={handleSubmit, onClose}>\n            <Form.Group controlId=\"formBasicRange\">\n              <Form.Label>withdraw</Form.Label>\n              <Form.Control type=\"range\" />\n            </Form.Group>\n        </Form>\n    </div>\n  )\n}\n","/home/nathan/lighthouse/blackjack-switch/client/src/components/Header.jsx",["92","93","94"],"import React, { useState } from \"react\"\nimport {Link} from 'react-router-dom'\nimport Popup from \"./Popup\"\nimport Home from \"./Home\"\nimport Login from \"./Login\"\nimport Deposit from \"./Deposit\"\nimport Withdraw from \"./Withdraw\"\nimport Registration from \"./Registration\"\nimport axios from \"axios\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./Header.css\";\nimport \"./Popup.css\"\n\n\n\nexport default function Header(props){\n\n  const [selectedMenu, setSelectedMenu] = useState(null)\n  \n  return (\n  <div class=\"dropdown\">\n    <button class=\"dropbtn\">Menu</button>\n  <div id=\"myDropdown\" class=\"dropdown-content\">\n  <button onClick={() => setSelectedMenu(\"register\")}>Resgister</button>\n      <Popup open = { selectedMenu === \"register\" } onClose = { () => setSelectedMenu(null)}>\n          <Registration onClose = { () => setSelectedMenu(null)}></Registration>\n      </Popup>\n    <button onClick={() => setSelectedMenu(\"deposit\")}>Deposit</button>\n      <Popup open = { selectedMenu === \"deposit\" } onClose = { () => setSelectedMenu(null)}>\n          <Deposit></Deposit>\n      </Popup>\n    <button onClick={() => setSelectedMenu(\"withdraw\")}>Withdraw</button>\n      <Popup open = { selectedMenu === \"withdraw\" } onClose = { () => setSelectedMenu(null)}>\n          <Withdraw></Withdraw>\n      </Popup>\n    <button onClick={() => setSelectedMenu(\"login\")}>Login</button>\n      <Popup open = { selectedMenu === \"login\"} onClose = { () => setSelectedMenu(null)}>\n          <Login onClose = { () => setSelectedMenu(null)}></Login>\n      </Popup>\n      <button class=\"logout\">Logout </button>  \n      </div>\n    </div>\n  )\n}","/home/nathan/lighthouse/blackjack-switch/client/src/components/Footer.jsx",[],"/home/nathan/lighthouse/blackjack-switch/client/src/components/Deposit.jsx",["95","96"],"import React, { useState } from 'react'\nimport { Button, Form } from \"react-bootstrap\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./Popup.css\"\n\nexport default function Deposit(onClose) {\n\n  const [amount, setAmount] = useState(\"\")\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(amount)\n}\n\n  return (\n    <div>\n   \n      <Form onSubmit={handleSubmit, onClose}>\n          <Form.Group controlId=\"formBasicEmail\">\n          <Form.Label>Deposet</Form.Label>\n              <Form.Control \n                  value= { amount } \n                  onChange={ (e) => { setAmount(e.target.value) }} \n                  type=\"deposit funds\" \n                  placeholder=\"Enter Amount\" />\n\n              </Form.Group>\n      </Form>\n    </div>\n  )\n}\n","/home/nathan/lighthouse/blackjack-switch/client/src/hooks/useApplicationData.js",["97","98","99"],"import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nimport { Deck, Hand } from \"../helpers/cardLogic\";\n\nexport default function useApplicationData() {\n\n  const [state, setState] = useState({\n    users: [],\n    cards: [],\n    hand: [],\n    dealer: {},\n    currentHand: -1,\n    turn: null,\n    actions: {\n      deal: false,\n      hit: false,\n      stay: false,\n      split: false,\n      switch: false,\n      double: false,\n      reset: true,\n    }\n  })\n\n  useEffect(() => {\n    Promise.all([ //unsure what the * does, might be security risk\n      axios.get('http://localhost:3001/api/users',\n        { headers: { 'Access-Control-Allow-Origin': '*' } }),\n      axios.get('http://localhost:3001/api/cards',\n        { headers: { 'Access-Control-Allow-Origin': '*' } })\n    ]).then((all) => {\n      let hand = []\n      hand[0] = new Hand();\n      hand[1] = new Hand();\n      let dealer = new Hand();\n      let updateActions = state.actions\n      updateActions.deal = true;\n      setState(prev => ({\n        ...prev,\n        users: all[0].data,\n        cards: all[1].data,\n        hand: hand,\n        dealer: dealer,\n        actions: updateActions,\n        turn: \"bet\"\n      }))\n    });\n  }, []);\n\n  const updateHand = (hand) => {\n    //first calculates the values hand\n    let value = 0;\n    let aces = hand.ace;\n    //let currentHand = state.currentHand;\n\n    for (const card of hand.cards) {\n      let cardInfo = state.cards.find(info => info.name === card);\n\n      value += cardInfo.value;\n      if (cardInfo.ace === true) aces++;\n    }\n    for (let i = aces; i > 0; i--) {\n      if (value > 21) {\n        value -= 10;\n      }\n    }\n\n    //checks if splitting should be possible\n    if (state.turn !== \"dealer\") {\n      if (hand.cards.length === 2) {\n        let card1value = state.cards.find(x => x.name === hand.cards[0]).value;\n        let card2value = state.cards.find(x => x.name === hand.cards[1]).value;\n        if (card1value === card2value) {\n          hand.canSplit = true;\n        }\n      } else {\n        hand.canSplit = false;\n      }      \n    }\n\n    hand.value = value;\n\n    setState(prev => ({ ...prev, [hand]: hand }));\n  }\n\n  const updateHands = (hands) => {\n    let activeHand = state.currentHand;\n    for (const hand of hands) {\n      //first calculates the values hand\n      let value = 0;\n      let aces = hand.ace;\n      let currentHand = state.currentHand;\n\n      for (const card of hand.cards) {\n        let cardInfo = state.cards.find(info => info.name === card);\n\n        value += cardInfo.value;\n        if (cardInfo.ace === true) aces++;\n      }\n      for (let i = aces; i > 0; i--) {\n        if (value > 21) {\n          value -= 10;\n        }\n        //checks if splitting should be possible\n        if (hand.cards.length === 2) {\n          let card1value = state.cards.find(x => x.name === hand.cards[0]).value;\n          let card2value = state.cards.find(x => x.name === hand.cards[1]).value;\n          if (card1value === card2value) {\n            hand.canSplit = true;\n          }\n        } else {\n          hand.canSplit = false;\n        }\n        hand.value = value;\n        //checks if hand is >= 21, if so, on to the next hand\n        if (state.turn === \"player\") {\n          if (hand.value >= 21 && currentHand < state.hand.length - 1) {\n            currentHand = currentHand + 1;\n          } else if (hand.value >= 21 && currentHand === state.hand.length - 1) {\n            updateActions(0, \"dealer\");\n          }\n        }\n      }\n    }\n    setState(prev => ({ ...prev, hand: hands, currentHand: activeHand }))\n  }\n\n  const addSplitHand = (newHand) => {\n    let updateHands = state.hand;\n    let currentHand = state.currentHand\n    if (currentHand < updateHands.length) {\n      updateHands.splice((currentHand + 1), 0, newHand)\n    } else {\n      updateHands.push(currentHand);\n    }\n\n    setState(prev => ({ ...prev, hand: updateHands }))\n  }\n\n  const updateActions = (currentHand, phase) => {\n    let updateActions = state.actions\n    switch (phase) {\n      case \"reveal\":\n        updateActions.reset = true;\n        break;\n      case \"bet\":\n        updateActions.deal = true;\n        break;\n      case \"deal\":\n        updateActions.deal = false;\n        updateActions.reset = false;\n        break;\n      case \"player\":\n        let swapStatus = (currentHand === 0 && state.hand[1].cards.length === 2 && state.hand.length === 2)\n        updateActions = {\n          deal: false,\n          hit: true,\n          stay: true,\n          split: state.hand[currentHand].canSplit,\n          switch: swapStatus,\n          double: true\n        }\n        break;\n      case \"dealer\":\n        updateActions = {\n          deal: false,\n          hit: false,\n          stay: false,\n          split: false,\n          switch: false,\n          double: false\n        }\n        break;\n    }\n    setState(prev => ({ ...prev, currentHand: currentHand, actions: updateActions, turn: phase }))\n  }\n\n  const resetHands = () => {\n      let hand = []\n      hand[0] = new Hand();\n      hand[1] = new Hand();\n      let dealer = new Hand();\n      setState(prev => ({\n        ...prev, hand: hand, currentHand: 0, dealer: dealer\n      }))\n  }\n\n  return { state, updateHand, updateHands, addSplitHand, updateActions, resetHands }\n}","/home/nathan/lighthouse/blackjack-switch/client/src/helpers/cardLogic.js",[],"/home/nathan/lighthouse/blackjack-switch/client/src/components/Actions.jsx",[],"/home/nathan/lighthouse/blackjack-switch/client/src/components/Table.jsx",[],"/home/nathan/lighthouse/blackjack-switch/client/src/components/Chips.jsx",[],"/home/nathan/lighthouse/blackjack-switch/client/src/components/Popup.jsx",["100","101"],"import React from \"react\"\nimport ReactDom from \"react-dom\"\nimport { Card, Button, Form } from \"react-bootstrap\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./Popup.css\"\n\nexport default function Popup({ open, children }){\n  if (!open) return null\n  return ReactDom.createPortal(\n    <>\n    <div className=\"modal-container\">\n      <Card style={{width:\"25rem\"}}>\n        <Card.Img className=\"img\" variant=\"top\" src=\"https://gaming.unlv.edu/gallery/BJ.jpg\" />\n        <Card.Body>\n          {children}\n        </Card.Body>\n\n      </Card>\n  `</div>\n    </>,\n    document.getElementById('portal')\n  )\n}","/home/nathan/lighthouse/blackjack-switch/client/src/components/Registration.jsx",[],"/home/nathan/lighthouse/blackjack-switch/client/src/components/Hand.jsx",[],"/home/nathan/lighthouse/blackjack-switch/client/src/components/Card.jsx",[],{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":6,"column":3,"nodeType":"108","messageId":"109","endLine":6,"endColumn":7},{"ruleId":"106","severity":1,"message":"110","line":18,"column":5,"nodeType":"108","messageId":"109","endLine":18,"endColumn":16},{"ruleId":"106","severity":1,"message":"111","line":46,"column":9,"nodeType":"108","messageId":"109","endLine":46,"endColumn":16},{"ruleId":"106","severity":1,"message":"112","line":50,"column":9,"nodeType":"108","messageId":"109","endLine":50,"endColumn":17},{"ruleId":"113","severity":2,"message":"114","line":11,"column":5,"nodeType":"108","messageId":"115","endLine":11,"endColumn":10},{"ruleId":"106","severity":1,"message":"116","line":2,"column":10,"nodeType":"108","messageId":"109","endLine":2,"endColumn":16},{"ruleId":"106","severity":1,"message":"117","line":8,"column":17,"nodeType":"108","messageId":"109","endLine":8,"endColumn":26},{"ruleId":"118","severity":1,"message":"119","line":19,"column":37,"nodeType":"120","messageId":"121","endLine":19,"endColumn":38},{"ruleId":"106","severity":1,"message":"107","line":2,"column":9,"nodeType":"108","messageId":"109","endLine":2,"endColumn":13},{"ruleId":"106","severity":1,"message":"122","line":4,"column":8,"nodeType":"108","messageId":"109","endLine":4,"endColumn":12},{"ruleId":"106","severity":1,"message":"123","line":9,"column":8,"nodeType":"108","messageId":"109","endLine":9,"endColumn":13},{"ruleId":"106","severity":1,"message":"116","line":2,"column":10,"nodeType":"108","messageId":"109","endLine":2,"endColumn":16},{"ruleId":"118","severity":1,"message":"119","line":18,"column":35,"nodeType":"120","messageId":"121","endLine":18,"endColumn":36},{"ruleId":"106","severity":1,"message":"124","line":4,"column":10,"nodeType":"108","messageId":"109","endLine":4,"endColumn":14},{"ruleId":"125","severity":1,"message":"126","line":49,"column":6,"nodeType":"127","endLine":49,"endColumn":8,"suggestions":"128"},{"ruleId":"129","severity":1,"message":"130","line":143,"column":5,"nodeType":"131","messageId":"132","endLine":175,"endColumn":6},{"ruleId":"106","severity":1,"message":"116","line":3,"column":16,"nodeType":"108","messageId":"109","endLine":3,"endColumn":22},{"ruleId":"106","severity":1,"message":"133","line":3,"column":24,"nodeType":"108","messageId":"109","endLine":3,"endColumn":28},"no-native-reassign",["134"],"no-negated-in-lhs",["135"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'updateHands' is assigned a value but never used.","'fakehit' is assigned a value but never used.","'fakehit2' is assigned a value but never used.","no-undef","'axios' is not defined.","undef","'Button' is defined but never used.","'setValuet' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'Home' is defined but never used.","'axios' is defined but never used.","'Deck' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'state.actions'. Either include it or remove the dependency array.","ArrayExpression",["136"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'Form' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"137","fix":"138"},"Update the dependencies array to be: [state.actions]",{"range":"139","text":"140"},[1206,1208],"[state.actions]"]