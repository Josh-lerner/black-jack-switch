[{"/vagrant/black-jack-switch/client/src/index.js":"1","/vagrant/black-jack-switch/client/src/reportWebVitals.js":"2","/vagrant/black-jack-switch/client/src/App.jsx":"3","/vagrant/black-jack-switch/client/src/components/Login.jsx":"4","/vagrant/black-jack-switch/client/src/components/Footer.jsx":"5","/vagrant/black-jack-switch/client/src/components/Deposit.jsx":"6","/vagrant/black-jack-switch/client/src/components/Header.jsx":"7","/vagrant/black-jack-switch/client/src/components/Withdraw.jsx":"8","/vagrant/black-jack-switch/client/src/components/Home.jsx":"9","/vagrant/black-jack-switch/client/src/helpers/cardLogic.js":"10","/vagrant/black-jack-switch/client/src/hooks/useApplicationData.js":"11","/vagrant/black-jack-switch/client/src/components/Table.jsx":"12","/vagrant/black-jack-switch/client/src/components/Actions.jsx":"13","/vagrant/black-jack-switch/client/src/components/Chips.jsx":"14","/vagrant/black-jack-switch/client/src/components/Hand.jsx":"15","/vagrant/black-jack-switch/client/src/components/Card.jsx":"16"},{"size":500,"mtime":1610654322158,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1610654322158,"results":"19","hashOfConfig":"18"},{"size":822,"mtime":1610920534366,"results":"20","hashOfConfig":"18"},{"size":71,"mtime":1610920534370,"results":"21","hashOfConfig":"18"},{"size":103,"mtime":1610920534366,"results":"22","hashOfConfig":"18"},{"size":113,"mtime":1610920534366,"results":"23","hashOfConfig":"18"},{"size":429,"mtime":1610920534370,"results":"24","hashOfConfig":"18"},{"size":115,"mtime":1610920534374,"results":"25","hashOfConfig":"18"},{"size":3516,"mtime":1611333589145,"results":"26","hashOfConfig":"18"},{"size":1604,"mtime":1611157785104,"results":"27","hashOfConfig":"18"},{"size":5255,"mtime":1611334268616,"results":"28","hashOfConfig":"18"},{"size":982,"mtime":1611244998547,"results":"29","hashOfConfig":"18"},{"size":1580,"mtime":1611333583529,"results":"30","hashOfConfig":"18"},{"size":926,"mtime":1611278083747,"results":"31","hashOfConfig":"18"},{"size":594,"mtime":1611330774519,"results":"32","hashOfConfig":"18"},{"size":155,"mtime":1611089378091,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1b944gn",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/vagrant/black-jack-switch/client/src/index.js",[],["70","71"],"/vagrant/black-jack-switch/client/src/reportWebVitals.js",[],"/vagrant/black-jack-switch/client/src/App.jsx",["72"],"import './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Home from './components/Home';\nimport Login from './components/Login';\nimport Header from './components/Header';\nimport Footer from './components/Footer'\nimport Withdraw from './components/Withdraw';\nimport Deposit from './components/Deposit'\n\nfunction App() {\n  return (\n    <Router> \n    <div className=\"App\">\n      <Header />\n      <Switch>\n        <Route path =\"/login\">\n          <Login />\n        </Route>\n        <Route path =\"/deposit\">\n          <Deposit />\n        </Route>\n        <Route path =\"/withdraw\">\n          <Withdraw />\n        </Route>\n        <Route path =\"/\">\n          <Home />\n        </Route>\n      </Switch>\n      <Footer />\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","/vagrant/black-jack-switch/client/src/components/Login.jsx",[],"/vagrant/black-jack-switch/client/src/components/Footer.jsx",[],"/vagrant/black-jack-switch/client/src/components/Deposit.jsx",[],"/vagrant/black-jack-switch/client/src/components/Header.jsx",[],"/vagrant/black-jack-switch/client/src/components/Withdraw.jsx",[],"/vagrant/black-jack-switch/client/src/components/Home.jsx",["73","74","75"],"import { Deck, Hand } from \"../helpers/cardLogic\";\nimport useApplicationData from \"../hooks/useApplicationData\"\n\nimport Table from \"./Table\";\nimport Chips from \"./Chips\";\nimport Actions from './Actions';\n\nimport \"./Home.css\";\n\n\nlet deck = new Deck(1);\nlet dealer = new Hand();\n\nexport default function Home(props) {\n  const {\n    state,\n    updateHand,\n    updateHands,\n    resetHands,\n    addSplitHand,\n    updateActions\n  } = useApplicationData();\n\n  let hand = state.hand;\n  let currentHand = state.currentHand;\n  let actions = state.actions;\n  \n  //if (state.dealer) dealer = state.dealer;\n  if (hand[currentHand]) actions.split = hand[currentHand].canSplit;\n\n  const deal = () => {\n    actions.deal = false;\n    updateActions(-1, \"deal\")\n\n    setTimeout(() => { hit(hand[0]) }, 350);\n    setTimeout(() => { hit(hand[0]) }, 1400);\n\n    setTimeout(() => { hit(hand[1]) }, 700);\n    setTimeout(() => { hit(hand[1]) }, 1750);\n\n    setTimeout(() => { hit(dealer) }, 1050);\n    setTimeout(() => { updateActions(0, \"player\") }, 1755);\n  }\n\n  //testcode\n  const fakehit = (hand) => {\n    hand.add(\"AS\")\n    updateHand(hand);\n  }\n  const fakehit2 = (hand) => {\n    hand.add(\"KH\")\n    updateHand(hand);\n  }\n\n  const hit = (hand) => {\n    hand.add(deck.draw())\n    updateHand(hand);\n    actions.switch = false;\n  }\n\n  const checkBlackjack = () => {    \n    if (hand[currentHand]) {\n      if (hand[currentHand].value >= 21 && state.turn === \"player\") {\n        stay()\n      }\n    }\n  }\n\n  const stay = () => {\n    if (currentHand < hand.length - 1) {\n      updateHand(hand[currentHand]);\n      currentHand++\n      updateActions(currentHand, \"player\");\n    } else if (currentHand === hand.length - 1) {\n      updateActions(currentHand, \"dealer\");\n    }\n  }\n\n  //DEALER\n  //dealer code\n  if (state.turn === \"dealer\") {\n    if (dealer.value < 17 || (dealer.ace > 0 && dealer.value === 17)) {\n      hit(dealer)\n    } else {\n      updateActions(-1, \"reveal\");\n    }\n  }\n\n  const split = () => {\n    if (hand[currentHand].canSplit === true) {\n      hand[currentHand].canSplit = false;\n      let newHand = new Hand(hand[currentHand].splitHand())\n      addSplitHand(newHand);\n      updateHand(hand[currentHand]);\n      updateHand(hand[currentHand + 1]);\n      setTimeout(() => { hit(hand[currentHand]) }, 500);\n      setTimeout(() => { hit(hand[currentHand + 1]) }, 1000);\n      //**Might have to add updateActions here! */\n    }\n  }\n\n  const doubleDown = () => {\n    //add code to double current hand's bet here\n    hit(hand[currentHand]);\n    stay()\n  }\n\n  //switch is not allowed as a function name in js, use swap instead\n  const swap = (hand1, hand2) => {\n    if (actions.switch) {\n      // actions.switch = false;\n      let temp = hand1.cards[1];\n      hand1.cards[1] = hand2.cards[1];\n      hand2.cards[1] = temp;\n      updateHand(hand1);\n      updateHand(hand2);\n    }\n  }\n\n  checkBlackjack();\n\n  const clearTable = () => {\n      resetHands()\n      dealer = new Hand();\n      updateActions(-1, \"bet\");\n  }\n\n  return (\n    <div class=\"table\">\n      <Table\n        cardLibrary={state.cards}\n        deck={deck}\n        hand={hand}\n        dealer={dealer}\n        currentHand={currentHand}\n      />\n      <Actions\n        hit={() => hit(hand[currentHand])}\n        stay={() => stay()}\n        deal={() => deal()}\n        swap={() => swap(hand[0], hand[1])}\n        split={() => split()}\n        double={() => doubleDown()}\n        reset={() => clearTable()}\n        actions={actions}\n      />\n      <Chips />\n\n    </div>\n  )\n}","/vagrant/black-jack-switch/client/src/helpers/cardLogic.js",[],"/vagrant/black-jack-switch/client/src/hooks/useApplicationData.js",["76","77","78"],"import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nimport { Deck, Hand } from \"../helpers/cardLogic\";\n\nexport default function useApplicationData() {\n\n  const [state, setState] = useState({\n    users: [],\n    cards: [],\n    hand: [],\n    dealer: {},\n    currentHand: -1,\n    turn: null,\n    actions: {\n      deal: false,\n      hit: false,\n      stay: false,\n      split: false,\n      switch: false,\n      double: false,\n      reset: true,\n    }\n  })\n\n  useEffect(() => {\n    Promise.all([ //unsure what the * does, might be security risk\n      axios.get('http://localhost:3001/api/users',\n        { headers: { 'Access-Control-Allow-Origin': '*' } }),\n      axios.get('http://localhost:3001/api/cards',\n        { headers: { 'Access-Control-Allow-Origin': '*' } })\n    ]).then((all) => {\n      let hand = []\n      hand[0] = new Hand();\n      hand[1] = new Hand();\n      let dealer = new Hand();\n      let updateActions = state.actions\n      updateActions.deal = true;\n      setState(prev => ({\n        ...prev,\n        users: all[0].data,\n        cards: all[1].data,\n        hand: hand,\n        dealer: dealer,\n        actions: updateActions,\n        turn: \"bet\"\n      }))\n    });\n  }, []);\n\n  const updateHand = (hand) => {\n    //first calculates the values hand\n    let value = 0;\n    let aces = hand.ace;\n    //let currentHand = state.currentHand;\n\n    for (const card of hand.cards) {\n      let cardInfo = state.cards.find(info => info.name === card);\n\n      value += cardInfo.value;\n      if (cardInfo.ace === true) aces++;\n    }\n    for (let i = aces; i > 0; i--) {\n      if (value > 21) {\n        value -= 10;\n      }\n    }\n\n    //checks if splitting should be possible\n    if (state.turn !== \"dealer\") {\n      if (hand.cards.length === 2) {\n        let card1value = state.cards.find(x => x.name === hand.cards[0]).value;\n        let card2value = state.cards.find(x => x.name === hand.cards[1]).value;\n        if (card1value === card2value) {\n          hand.canSplit = true;\n        }\n      } else {\n        hand.canSplit = false;\n      }      \n    }\n\n    hand.value = value;\n\n    setState(prev => ({ ...prev, [hand]: hand }));\n  }\n\n  const updateHands = (hands) => {\n    let activeHand = state.currentHand;\n    for (const hand of hands) {\n      //first calculates the values hand\n      let value = 0;\n      let aces = hand.ace;\n      let currentHand = state.currentHand;\n\n      for (const card of hand.cards) {\n        let cardInfo = state.cards.find(info => info.name === card);\n\n        value += cardInfo.value;\n        if (cardInfo.ace === true) aces++;\n      }\n      for (let i = aces; i > 0; i--) {\n        if (value > 21) {\n          value -= 10;\n        }\n        //checks if splitting should be possible\n        if (hand.cards.length === 2) {\n          let card1value = state.cards.find(x => x.name === hand.cards[0]).value;\n          let card2value = state.cards.find(x => x.name === hand.cards[1]).value;\n          if (card1value === card2value) {\n            hand.canSplit = true;\n          }\n        } else {\n          hand.canSplit = false;\n        }\n        hand.value = value;\n        //checks if hand is >= 21, if so, on to the next hand\n        if (state.turn === \"player\") {\n          if (hand.value >= 21 && currentHand < state.hand.length - 1) {\n            currentHand = currentHand + 1;\n          } else if (hand.value >= 21 && currentHand === state.hand.length - 1) {\n            updateActions(0, \"dealer\");\n          }\n        }\n      }\n    }\n    setState(prev => ({ ...prev, hand: hands, currentHand: activeHand }))\n  }\n\n  const addSplitHand = (newHand) => {\n    let updateHands = state.hand;\n    let currentHand = state.currentHand\n    if (currentHand < updateHands.length) {\n      updateHands.splice((currentHand + 1), 0, newHand)\n    } else {\n      updateHands.push(currentHand);\n    }\n\n    setState(prev => ({ ...prev, hand: updateHands }))\n  }\n\n  const updateActions = (currentHand, phase) => {\n    let updateActions = state.actions\n    switch (phase) {\n      case \"reveal\":\n        updateActions.reset = true;\n        break;\n      case \"bet\":\n        updateActions.deal = true;\n        break;\n      case \"deal\":\n        updateActions.deal = false;\n        updateActions.reset = false;\n        break;\n      case \"player\":\n        let swapStatus = (currentHand === 0 && state.hand[1].cards.length === 2 && state.hand.length === 2)\n        updateActions = {\n          deal: false,\n          hit: true,\n          stay: true,\n          split: state.hand[currentHand].canSplit,\n          switch: swapStatus,\n          double: true\n        }\n        break;\n      case \"dealer\":\n        updateActions = {\n          deal: false,\n          hit: false,\n          stay: false,\n          split: false,\n          switch: false,\n          double: false\n        }\n        break;\n    }\n    setState(prev => ({ ...prev, currentHand: currentHand, actions: updateActions, turn: phase }))\n  }\n\n  const resetHands = () => {\n      let hand = []\n      hand[0] = new Hand();\n      hand[1] = new Hand();\n      let dealer = new Hand();\n      setState(prev => ({\n        ...prev, hand: hand, currentHand: 0, dealer: dealer\n      }))\n  }\n\n  return { state, updateHand, updateHands, addSplitHand, updateActions, resetHands }\n}","/vagrant/black-jack-switch/client/src/components/Table.jsx",[],"/vagrant/black-jack-switch/client/src/components/Actions.jsx",[],"/vagrant/black-jack-switch/client/src/components/Chips.jsx",[],"/vagrant/black-jack-switch/client/src/components/Hand.jsx",[],"/vagrant/black-jack-switch/client/src/components/Card.jsx",[],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":6,"column":3,"nodeType":"85","messageId":"86","endLine":6,"endColumn":7},{"ruleId":"83","severity":1,"message":"87","line":18,"column":5,"nodeType":"85","messageId":"86","endLine":18,"endColumn":16},{"ruleId":"83","severity":1,"message":"88","line":46,"column":9,"nodeType":"85","messageId":"86","endLine":46,"endColumn":16},{"ruleId":"83","severity":1,"message":"89","line":50,"column":9,"nodeType":"85","messageId":"86","endLine":50,"endColumn":17},{"ruleId":"83","severity":1,"message":"90","line":4,"column":10,"nodeType":"85","messageId":"86","endLine":4,"endColumn":14},{"ruleId":"91","severity":1,"message":"92","line":49,"column":6,"nodeType":"93","endLine":49,"endColumn":8,"suggestions":"94"},{"ruleId":"95","severity":1,"message":"96","line":143,"column":5,"nodeType":"97","messageId":"98","endLine":175,"endColumn":6},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'updateHands' is assigned a value but never used.","'fakehit' is assigned a value but never used.","'fakehit2' is assigned a value but never used.","'Deck' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'state.actions'. Either include it or remove the dependency array.","ArrayExpression",["101"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation",{"desc":"102","fix":"103"},"Update the dependencies array to be: [state.actions]",{"range":"104","text":"105"},[1206,1208],"[state.actions]"]